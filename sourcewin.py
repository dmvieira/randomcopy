#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Oct 25 20:16:49 2010

import wx, locale
import random, shutil, os

# begin wxGlade: extracode
# end wxGlade
curdir = ""  # Use  filename as a flag
palavras=[]

if locale.getdefaultlocale()[0]=='pt_BR' or locale.getdefaultlocale()[0]=='pt':
    palavras.append(u"Pasta de Arquivos")
    palavras.append(u"Qual tipo de arquivo?")
    palavras.append(u"mp3;wma;wav;amr")
    palavras.append(u"Quantos arquivos?")
    palavras.append("350")
    palavras.append(u"Copie agora!")
    palavras.append(u"Programa para auxiliar a cópia de arquivos aleatórios para qualquer pasta.\nBeijos para Vivi! Obrigado por tudo amor... Agradeço minha família e amigos.\nVersão 0.7\n Feito por Diogo Munaro Vieira: diogo.mvieira@gmail.com")
    palavras.append(u"Colocar extensões dos arquivos (EXEMPLOS):\nSomente um tipo: mp3 \t\t\t\tVários tipos: mp3;avi;jpeg\nTodos os tipos: (deixar em branco)\nPara mais informações: http://elp.org.br/diogo_acessories/RandomCopy/Manual_RandomCopy")
    palavras.append(u'Erro')
    palavras.append(u'O que faremos?')
    palavras.append(u'Sucesso')
    palavras.append(u'Aviso')
    palavras.append(u"Main")
    palavras.append(u"Sobre")
    palavras.append(u"Manual")
    palavras.append(u"Escolha a pasta aonde estão os arquivos:")
    palavras.append(u"Escolha a pasta aonde ficarão os arquivos:")
    palavras.append(u'Formato de tipo de arquivo incorreto\nOu: mp3;avi;wma (mais de um)\nOu: avi (somente um)\nOu:  (todos)\nVerifique se é esse o formato\nque gostaria na caixa aonde tinha\ndigitado o errado.')
    palavras.append(u'Formato de tipo de arquivo incorreto\nOu: mp3;avi;wma (mais de um)\nOu: avi (somente um)\nOu:  (todos)')
    palavras.append(u'Inteiro aqui!')
    palavras.append(u'O número de arquivos precisa\nser inteiro e maior que zero')
    palavras.append(u'Arquivos no(s) formato(s)\n')
    palavras.append(u'\nnão existem na pasta de origem,\ne não serão copiados')
    palavras.append(u"Copiando...")
    palavras.append(u"Iniciando...")
    palavras.append(u'Copiando\n')
    palavras.append(u'Pasta de destino cheia, protegida contra gravação\nou o arquivo de origem sumiu. Limpe o diretório.\nTentar continuar?')
    palavras.append(u'Alguns arquivos podem ter sido copiados.\nConfira a pasta de destino.')
    palavras.append(u'Concluído! Arquivos copiados\ncom sucesso!')
    palavras.append(u'Número de arquivos insuficiente\nna pasta com uma extensão\n')
    palavras.append(u'\nou erro em uma delas')
    palavras.append(u'Pasta de arquivos ou destino\nnão encontrado')    
    palavras.append(u'Deseja copiar dos\nsubdiretórios também?')    
    palavras.append(u'Algumas extensões de arquivos podiam\nestar somente nos subdiretórios.')    
    
else:
    palavras.append(u"Files Folder")
    palavras.append(u"Which the file extension?")
    palavras.append(u"mp3;wma;wav;amr")
    palavras.append(u"How many files?")
    palavras.append("350")
    palavras.append(u"Copy now!")
    palavras.append(u"Program to help copy random files to any folder.\nKisses Vivi! Thanks for all love ... I thank my family and friends too.\nVersion 0.7\n Made by Diogo Munaro Vieira: diogo.mvieira@gmail.com")
    palavras.append(u"Put file extensions (EXAMPLES):\nOnly one type: mp3 \t\t\t\tMore types: mp3;avi;jpeg\nAll the types: (leave blank)\nFor futher information: http://elp.org.br/diogo_acessories/RandomCopy/Manual_RandomCopy")
    palavras.append(u'Error')
    palavras.append(u'And Now?')
    palavras.append(u'Sucess')
    palavras.append(u'Warning')
    palavras.append(u"Main")
    palavras.append(u"About")
    palavras.append(u"Manual")
    palavras.append(u"Choose the folder where the files are:")
    palavras.append(u"Choose the folder where the files will be saved:")
    palavras.append(u'Incorrect file type written\nOr: mp3;avi;wma (more than one)\nOr: avi (only one)\nOr:  (all)\nVerify if now is right.')
    palavras.append(u'Incorrect file type written\nOr: mp3;avi;wma (more than one)\nOr: avi (only one)\nOr:  (all)')
    palavras.append(u'Integer here!')
    palavras.append(u'Number of files need to be an integer,\nand greater than zero')
    palavras.append(u'Type file(s)\n')
    palavras.append(u"\ndoesn't exist in the source folder,\nand doesn't be copied.") 
    palavras.append(u"Copying...")
    palavras.append(u"Starting...")
    palavras.append(u'Copying\n')
    palavras.append(u'Destination folder full, write protected\nor the source file is missing. Clean the directory.\nTry to continue?')
    palavras.append(u'Some files may have been copied.\nCheck the destination folder.')
    palavras.append(u'Done! Files copied\nsuccessfully!')
    palavras.append(u'Insufficient number of files\nin the folder with extension\n')
    palavras.append(u'\nor error in one of then')
    palavras.append(u'File folder or destination\nnot found')   
    palavras.append(u'Want to copy the subdirectories as well?')    
    palavras.append(u'Some file extensions could only be in subdirectories.')  
    
        
    
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        global palavras
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.button_1 = wx.Button(self.notebook_1_pane_1, -1, palavras[0])
        self.panel_1 = wx.Panel(self.notebook_1_pane_1, -1)
        self.label_1 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[1])
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_1, -1, palavras[2])
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[3])
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_1, -1, palavras[4])
        self.button_2 = wx.Button(self.notebook_1_pane_1, -1, palavras[5])
        self.panel_4 = wx.Panel(self.notebook_1_pane_1, -1)
        self.label_2 = wx.StaticText(self.notebook_1_pane_2, -1, palavras[6])
        self.label_4 = wx.StaticText(self.notebook_1_pane_3, -1, palavras[7])


        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.Abrir, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.Salvar, self.button_2)
        # end wxGlade
    
    def Erro(self,texto):
        return Exception(wx.MessageBox(texto, palavras[8], wx.OK | wx.ICON_ERROR))            

    
    def Pergunta(self, texto):
        return wx.MessageBox(texto, palavras[9], wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        
    def Sucesso(self,texto):
        wx.MessageBox(texto, palavras[10], wx.OK)

    def Aviso(self, texto):
        wx.MessageBox(texto, palavras[11], wx.OK | wx.ICON_EXCLAMATION)



    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("RandomCopy")
        self.text_ctrl_1.SetMinSize((150, 27))
        self.text_ctrl_2.SetMinSize((100, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(2, 4, 0, 0)
        grid_sizer_1.Add(self.button_1, 0, 0, 0)
        grid_sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.SHAPED, 0)
        grid_sizer_1.Add(self.text_ctrl_1, 0, 0, 0)
        grid_sizer_1.Add(self.label_3, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.text_ctrl_2, 0, 0, 0)
        grid_sizer_1.Add(self.button_2, 0, 0, 0)
        grid_sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(grid_sizer_1)
        sizer_2.Add(self.label_2, 0, 0, 0)
        sizer_3.Add(self.label_4, 0, 0, 0)
        self.notebook_1_pane_2.SetSizer(sizer_2)
        self.notebook_1_pane_3.SetSizer(sizer_3)
        self.notebook_1.AddPage(self.notebook_1_pane_1, palavras[12])
        self.notebook_1.AddPage(self.notebook_1_pane_2, palavras[13])
        self.notebook_1.AddPage(self.notebook_1_pane_3, palavras[14])
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()

        # end wxGlade

    def Abrir(self, event): # wxGlade: MyFrame.<event_handler>
        dlg = wx.DirDialog(self, message= palavras[15])
 
        if dlg.ShowModal() == wx.ID_OK:
            global curdir
            # get the new filename from the dialog
            curdir = dlg.GetPath()
            oqtem=''
            tree = os.walk(curdir)
            for root, dirs, files in tree:
                for file in files:
                    if ((os.path.splitext(os.path.join(root,file))[1]).replace('.','')).lower() not in oqtem:
                        oqtem = oqtem+(os.path.splitext(os.path.join(root,file))[1].replace('.','')).lower()+';'
            self.text_ctrl_1.SetValue(oqtem[:-1])

        dlg.Destroy()  # best to do this sooner than later
    def Salvar(self, event): # wxGlade: MyFrame.<event_handler>
        dlg = wx.DirDialog(self, message= palavras[16])
 
        if dlg.ShowModal() == wx.ID_OK:
 
            # get the new filename from the dialog
            savedir = dlg.GetPath()
        else:
            return Exception()
        dlg.Destroy()  # best to do this sooner than later
        global curdir
        arq, ntem=[],[]
        itens=[]
        if savedir and curdir and savedir!=curdir: # verifica se diretorio existe
            subdir=self.Pergunta(palavras[32])
            if subdir==wx.YES:
                tree = os.walk(curdir)
                for root, dirs, files in tree:
                    for file in files:
                        if file[0]=='.':
                            pass
                        else:
                            itens+=[os.path.join(root,file)]
            else:
                for item in os.listdir(curdir):
                    if item[0]=='.':
                        pass
                    else:
                        itens+=[os.path.join(curdir,item)]
                self.Aviso(palavras[33])
            ext=self.text_ctrl_1.GetValue()
            if ext !='': 
                if ext[-1]==';':
                    self.text_ctrl_1.SetValue(ext[:-1])
                    self.Erro(palavras[17])

                if '.' in ext:
                    self.text_ctrl_1.SetValue(ext.replace('.',''))
                    self.Erro(palavras[17])

                if ';' in ext and ext[-1]!=';' and ext[0]!=';' and '.' not in ext:
                    while ';' in ext:
                        b=len(arq)
                        arq += [item for item in itens if (item.lower().endswith('.'+ext[:ext.index(';')]) or item.upper().endswith('.'+ext[:ext.index(';')]))]
                        if b==len(arq):
                            ntem += [ext[:ext.index(';')]]
                        ext=ext[(ext.index(';')+1):]
                    b=len(arq)
                    arq += [item for item in itens if (item.lower().endswith('.'+ext) or item.upper().endswith('.'+ext))]
                    if b==len(arq):
                        ntem += [ext]

                elif ';' not in ext and '.' not in ext:
                    arq = [item for item in itens if (item.lower().endswith('.'+ext) or item.upper().endswith('.'+ext))]
               
                else:
                    self.Erro(palavras[18])
                    
            else:
                arq=itens
            numeros=[]
            try:
                int(self.text_ctrl_2.GetValue())
            except:
                self.text_ctrl_2.SetValue(palavras[19])
                self.Erro(palavras[20])
                numeros=[]
                
            if int(self.text_ctrl_2.GetValue())>0:
                max=int(self.text_ctrl_2.GetValue())
            else:
                self.Erro(palavras[20])
                numeros=[]
            if ntem!=[]:
                i=0
                stri=''  
                for i in range(len(ntem)):
                    stri+=ntem[i]+' / '
                self.Aviso(palavras[21]+stri+palavras[22])                    
            if len(arq) > max:
                while len(numeros) < max:
                    ale = random.randint(1,len(arq))
                    if ale not in numeros:
                        numeros.append(ale)
                dialog = wx.ProgressDialog(palavras[23],palavras[24], max,style = wx.PD_AUTO_HIDE | wx.PD_CAN_ABORT)
                dialog.Centre()
                dialog.SetMinSize((700, 150))
                item=numeros[0]
                i=0
                while i < len(numeros):
                    try:
                        item=numeros[i]
                        continua=dialog.Update(numeros.index(item)+1,palavras[25]+os.path.basename(arq[item]))
                        if continua[0]:
                            if os.path.isfile(os.path.join(savedir,os.path.basename(arq[item]))):
                                numsorte=0
                                modificado=os.path.join(savedir,os.path.basename(arq[item]))                             
                                while os.path.isfile(modificado):
                                    numsorte=numsorte+1
                                    modificado=os.path.join(savedir,os.path.basename(os.path.splitext(arq[item])[0]))+'('+str(numsorte)+')'+os.path.splitext(arq[item])[1]
                                else: 
                                    dialog.Centre()
                                    shutil.copy2(arq[item], modificado)                                    
                            else:
                                dialog.Centre()
                                shutil.copy2(arq[item], os.path.join(savedir,os.path.basename(arq[item])))
                        else:
                            dialog.Destroy()
                            return Exception()
                        i+=1
                    except IOError:
                        decisao=self.Pergunta(palavras[26])
                        if decisao == wx.NO:
                            dialog.Destroy()
                            return Exception(self.Aviso(palavras[27]))


                dialog.Destroy()
                self.Sucesso(palavras[28])
                numeros=[]
            elif len(arq) == max:
                dialog = wx.ProgressDialog(palavras[23],palavras[24], max,style = wx.PD_AUTO_HIDE | wx.PD_CAN_ABORT)
                dialog.Centre()               
                dialog.SetMinSize((700, 150))
                item=0
                while item in range(len(arq)):
                    try:
                        continua=dialog.Update(item,palavras[25]+os.path.basename(arq[item]))
                        if continua[0]:
                            if os.path.isfile(os.path.join(savedir,os.path.basename(arq[item]))):
                                numsorte=0
                                modificado=os.path.join(savedir,os.path.basename(arq[item]))                             
                                while os.path.isfile(modificado):
                                    numsorte=numsorte+1
                                    modificado=os.path.join(savedir,os.path.basename(os.path.splitext(arq[item])[0]))+'('+str(numsorte)+')'+os.path.splitext(arq[item])[1]
                                else: 
                                    dialog.Centre()
                                    shutil.copy2(arq[item], modificado)                                    
                            else:
                                dialog.Centre()
                                shutil.copy2(arq[item], os.path.join(savedir,os.path.basename(arq[item])))
                        else:
                            dialog.Destroy()
                            return Exception()
                        item+=1
                    except IOError:
                        decisao=self.Pergunta(palavras[26])
                        if decisao == wx.NO:
                            dialog.Destroy()
                            return Exception(self.Aviso(palavras[27]))
                dialog.Destroy()
                self.Sucesso(palavras[28])
                
            else:
                self.Erro(palavras[29]+self.text_ctrl_1.GetValue()+palavras[30])
                numeros=[]
        else:
            self.Erro(palavras[31])
            numeros=[]        

       
# end of class MyFrame



if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.SetIcon(wx.Icon('randomcopy.ico',wx.BITMAP_TYPE_ICO))
    frame_1.Show()
    app.MainLoop()
